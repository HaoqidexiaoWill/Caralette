<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/06/23/%E5%A4%9A%E7%BB%88%E7%AB%AF%E7%BC%96%E8%BE%91HEXO%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/06/23/%E5%A4%9A%E7%BB%88%E7%AB%AF%E7%BC%96%E8%BE%91HEXO%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="多终端编辑HEXO博客"><a href="#多终端编辑HEXO博客" class="headerlink" title="多终端编辑HEXO博客"></a>多终端编辑HEXO博客</h2><blockquote><p>默认之前已经构建好了<code>HEXO</code>的博客，此博客暂记录在MAC上已经有博客的基础上，通过github分支对源文件进行管理，从而实现多终端编辑更新博客</p></blockquote><h3 id="首先要把源文件同步到github"><a href="#首先要把源文件同步到github" class="headerlink" title="首先要把源文件同步到github"></a>首先要把源文件同步到github</h3><ul><li>配置<code>.gitignore</code>文件（处于<strong>安全考虑</strong>不同步配置文件<code>_config.yml</code>）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">.DS_Store<br>Thumbs.db<br>db.json<br>*.<span class="hljs-built_in">log</span><br>node_modules/<br>public/<br>.deploy*/<br>_config.yml<br></code></pre></td></tr></table></figure><h3 id="Github同步"><a href="#Github同步" class="headerlink" title="Github同步"></a>Github同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init <span class="hljs-comment"># 初始化本地仓库</span><br>git add -A <span class="hljs-comment"># 添加本地所有文件到仓库</span><br>git commit -m <span class="hljs-comment"># 添加commit</span><br>git brach hexo <span class="hljs-comment"># 创建本地仓库分支</span><br><span class="hljs-comment"># 关联远端仓库</span><br>git remote add origin git@github.com:HaoqidexiaoWill/UriBoyka2020.github.io.git<br>git push origin hexo <span class="hljs-comment"># 将本地仓库的源文件推送到远程仓库的hexo分支</span><br></code></pre></td></tr></table></figure><h3 id="其他终端同步代码下来"><a href="#其他终端同步代码下来" class="headerlink" title="其他终端同步代码下来"></a>其他终端同步代码下来</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b hexo git@github.com:HaoqidexiaoWill/UriBoyka2020.github.io.git<br></code></pre></td></tr></table></figure><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/img/9UFvAa6GRrIKlbT.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> UriBoyka2020.github.io<br>npm install <br></code></pre></td></tr></table></figure><p>报警似乎不用管</p><blockquote><p>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href="mailto:&#x66;&#115;&#101;&#118;&#x65;&#x6e;&#116;&#115;&#64;&#50;&#46;&#49;&#46;&#50;">&#x66;&#115;&#101;&#118;&#x65;&#x6e;&#116;&#115;&#64;&#50;&#46;&#49;&#46;&#50;</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”win32”,”arch”:”x64”})</p></blockquote><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># 清除缓存</span><br>hexo g <span class="hljs-comment"># 编译</span><br>hexo s     <span class="hljs-comment"># 本地预览</span><br>hexo d <span class="hljs-comment"># 部署</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li>本地显示没问题，GithubPages显示异常</li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/img/20210623132941.png"></p><p>这种情况主要是，githubpages的链接一级config.yml配置文件中的路径设置不对</p><p><strong>pages页面设置成如下形式</strong></p><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/img/20210623133042.png"></p><p><strong>配置文件设置成如下形式</strong></p><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/img/20210623133114.png"></p><p><strong>关联仓库设置成如下</strong></p><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/img/20210623133208.png"></p><h3 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h3><p><strong>美化之前是这样的</strong></p><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/img/20210623133323.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/06/23/%E7%BF%BB%E5%A2%99%E6%95%99%E7%A8%8B/"/>
    <url>/2021/06/23/%E7%BF%BB%E5%A2%99%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="翻墙教程"><a href="#翻墙教程" class="headerlink" title="翻墙教程"></a>翻墙教程</h1><h2 id="一、创建远程服务器"><a href="#一、创建远程服务器" class="headerlink" title="一、创建远程服务器"></a>一、创建远程服务器</h2><ul><li><a href="https://cloud.digitalocean.com/projects?i=14deb2">https://cloud.digitalocean.com/projects?i=14deb2</a></li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/y74gIn.png" alt="y74gIn"></p><ul><li>登陆进去创建droplets</li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/quUhqY.png" alt="quUhqY"></p><ul><li>创建了一个ubuntu的服务器</li></ul><p><img src="/Users/liusongyan/Library/Application%20Support/typora-user-images/image-20210213115945919.png" alt="image-20210213115945919"></p><ul><li>点击控制台console，远程进入到服务器</li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/tUc2kt.png" alt="tUc2kt"></p><ul><li>输入刚才创建的账号（root）和密码就进去了</li></ul><p><img src="/Users/liusongyan/Library/Application%20Support/typora-user-images/image-20210213115822141.png" alt="image-20210213115822141"></p><h2 id="二、先把更新跑一遍"><a href="#二、先把更新跑一遍" class="headerlink" title="二、先把更新跑一遍"></a>二、先把更新跑一遍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; sudo apt -y upgrade<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; sudo apt install curl unzip vim wget -y<br></code></pre></td></tr></table></figure><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/QTsbzv.png" alt="QTsbzv"></p><h2 id="三、校正时区"><a href="#三、校正时区" class="headerlink" title="三、校正时区"></a>三、校正时区</h2><ul><li>查看当前系统时间</li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/uYF5xe.png" alt="uYF5xe"></p><ul><li><p>设置正确的时区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo timedatectl set-timezone Asia/Shanghai<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/BVHHNn.png" alt="BVHHNn"></p><h2 id="四、配置DNS"><a href="#四、配置DNS" class="headerlink" title="四、配置DNS"></a>四、配置DNS</h2><ul><li>设置DNS将域名解析到VPS的IP上</li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/pN0v41.png" alt="pN0v41"></p><h2 id="五、配置SSL证书"><a href="#五、配置SSL证书" class="headerlink" title="五、配置SSL证书"></a>五、配置SSL证书</h2><h2 id="五、安装V2Ray"><a href="#五、安装V2Ray" class="headerlink" title="五、安装V2Ray"></a>五、安装V2Ray</h2><ul><li><p>在CentOS、Ubuntu等常用Linux系统上，直接执行如下命令安装<code>V2Ray</code>（如果已安装则更新程序）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash &lt;(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/goV2.sh)<br></code></pre></td></tr></table></figure><blockquote><p>2020.08.15更新：原官方一键安装脚本被弃用，这里使用他人提供的兼容脚本</p></blockquote></li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/529rey.png" alt="529rey"></p><h2 id="六、安装Nginx"><a href="#六、安装Nginx" class="headerlink" title="六、安装Nginx"></a>六、安装Nginx</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/06/23/%E7%A4%BE%E5%8C%BA%E5%9B%A2%E8%B4%AD%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D%E6%95%B4%E7%90%86/"/>
    <url>/2021/06/23/%E7%A4%BE%E5%8C%BA%E5%9B%A2%E8%B4%AD%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="美团优选-amp-社区团购整理"><a href="#美团优选-amp-社区团购整理" class="headerlink" title="美团优选&amp;社区团购整理"></a>美团优选&amp;社区团购整理</h1><h2 id="业务逻辑简介-描述对美团优选业务的理解"><a href="#业务逻辑简介-描述对美团优选业务的理解" class="headerlink" title="业务逻辑简介(描述对美团优选业务的理解)"></a>业务逻辑简介(描述对美团优选业务的理解)</h2><p><strong>社区团购</strong>的商业模式由平台、团长和社区居民组成：</p><ul><li>团购平台-团长：平台为团长提供商品、物流、售后等支持，团长收取10%左右的佣金；</li><li>团长-社区居民：团长利用自身的私域流量，建立社群运营、给社区居民推荐商品；</li><li>社区居民-平台：居民通过平台app或小程序下单产品，平台为居民提供售后服务。</li></ul><p>社区团购整体模式：拼团+预售+自提，如兴盛优选、十荟团、橙心优选、<strong>美团优选</strong>、 多多买菜，等</p><h2 id="为什么要做美团优选"><a href="#为什么要做美团优选" class="headerlink" title="为什么要做美团优选"></a>为什么要做美团优选</h2><ul><li><strong>总体市场规模大，</strong>社区团购目前主要集中在生鲜品类，2019年生鲜农产品的产量在12亿吨，产值约7万亿（初级农产品），加上生鲜加工、仓储和流通，整个市场的交易额超过20万亿。</li><li><strong>线上化率低</strong>，从我们自身的主观感受来看，我们买手机、买电脑，基本已经不去线下店了，都是网上购买，而买衣服除了平时逛街偶尔线下买之外，大部分也是在线上电商购买。但是蔬菜水果，可能仍然会去附近的超市，菜场或周围的水果店购买。</li><li><strong>消费场景比餐饮更高频，</strong>从年龄上说，退休后和还未上大学的学生，大部分情况应该都是在家吃饭。这就覆盖了0-18 和 60+以上的两部分人群，按照年龄段和人口结构看，大概占比三分之一。还有很多结婚人群以及和父母同住的情况，特别是在低线城市。所以保守估计，在家吃饭的情况妥妥的超过三分之二。这也就意味着，在大部分的家庭中，可以一周不点外卖，可以一周不到店吃饭，但一定需要买菜，这就是一个比餐饮更高频的消费场景。</li><li><strong>覆盖到更偏远的农村与城乡结合部，用户更下沉</strong>，大部分的互联网平台都在抢夺存量用户的时间，因为移动互联网已经没有多少新增流量了。但是拼多多让他们发现，原来还有这么多他们之前未曾发现的用户。在低线城市，在家做饭的场景比一二线城市更普遍，频次更高。而如果渗透到了这些用户，那么将是对自身用户结构的极大补充。比如美团的用户基本集中在三四线以上，如果能拓展到县级市及城乡结合部，那么他的用户规模可能是一个翻倍的增长，订单量甚至是量级的变化。</li></ul><h2 id="美团优选的优势"><a href="#美团优选的优势" class="headerlink" title="美团优选的优势"></a>美团优选的优势</h2><ul><li><strong>通过预售和团长，降低供应链成本</strong>：社区团购的预售模式，理论上可以做到接近0库存，即供需不匹配造成的损耗几乎为0。另外在配送上，会批量配送给团长，由团长来负责末端配送或自提，降低配送的成本。由于供需几乎匹配，所以存储时间也会比较短，存储成本和存储造成的损耗也会降低。在配送成本上，除去团长佣金，社区团购模式几乎能和商超的配送成本差不多，而在损耗和仓储上，则有了比商超更低的成本，这也让生鲜产品价格比线下更低成为可能。</li><li><strong>通过团长，降低拉新和运营用户的成本</strong>：除了仓储、物流和损耗的成本，线上生鲜的另一块主要成本是流量和拉新成本，团长就是为了降低这块成本的。团长在充当末端分拣和自提点的任务之外，最重要的任务是拉新和促活。每个团长都至少会有一个人数众多的微信群，通过邻里关系来帮平台拉新用户，并且不定期在群里或朋友圈放出推荐的商品。这种通过半熟人的方式来拉新，成本会低很多，并且转化率比线上的常用方式更高。</li><li><strong>所有的竞争力全在商品和价格</strong>：美团优选本质上是一种社区团购：<strong>社区场景的家庭购买，统一的团购下单和履约。</strong>在社区团购中，家庭购买非常统一，家家使用的快消粮油清洁商品都差不多，将这种生意进行规模化复制，就成为零售业很理想的一种生意：<strong>批发式零售</strong>。因为是批发式零售，价格即使没有补贴，也比一般零售渠道便宜。这个时候只要再做到东西<strong>品质</strong>很好，那简直就是零售最硬朗的实力：好货低价。</li></ul><h2 id="美团优选所面临的挑战"><a href="#美团优选所面临的挑战" class="headerlink" title="美团优选所面临的挑战"></a>美团优选所面临的挑战</h2><ul><li><p><strong>暂时无法解决出货规模和品类丰富的函数关系。</strong>即规模是社区团购这种批发式零售的独特特性，但是一旦单品和品类走了丰富路线，铁定会稀释单一商品的规模。没有规模，就没有价格优势，就会反过来反噬社区团购这个商业模式的先天优势。</p></li><li><p><strong>暂时无法提供完整的一整套解决方案，这点生鲜最为典型。</strong>因为一盘菜的烹饪，中餐需要至少5-15种主料、辅料、配料、佐料。导致一盘菜的烹制，传统生鲜提供的购买体验，都是少量而多种的购买。这种购买是<strong>菜市场</strong>这种低门槛做生意，分散化的摊位设置又丰富配置菜品的线下场景<strong>的强项</strong>，生鲜电商和社区团购，目前的产业能力还要大大的进化。</p></li><li><p><strong>深入到村镇一级做下沉最彻底的团购。</strong>城市小区是社区，村镇也是社区。目前中国电商最下沉的地方，还只是到乡镇，还不能到乡镇下面的村子。因为电商一个订单一个物流包裹的履约模式，绝对玩不起深入到广袤分散，订单又不是很集中的村子。可是农村家庭除了极端贫困户，都具有完整意义上的家庭购买需求，社区团购的价值，在于它首次用最效率和经济的方案，让人看到了信心，可以做农村家庭一站式购买的渠道商，而且还可以深入到村落这个最下沉最末端单位。</p></li></ul><h2 id="美团优选与拼多多买菜以及橙心优选之间比较"><a href="#美团优选与拼多多买菜以及橙心优选之间比较" class="headerlink" title="美团优选与拼多多买菜以及橙心优选之间比较"></a>美团优选与拼多多买菜以及橙心优选之间比较</h2><ul><li>美团优选不论在<strong>产品设计</strong>上还是<strong>产品运营上</strong>，相较其他竞品都要更加完善。    <ul><li>拼多多买菜的优势主要在农产品上下游产业生态的构建上</li><li>美团通过在生鲜领域长期的布局积累了一定供应链资源，</li><li>兴盛优选凭借芙蓉兴盛门店网络深耕于湖南市场，</li><li>橙心优选在算法上的技术优势为仓储配送赋能</li></ul></li><li>更详细的竞品分析报告：<ul><li><a href="http://www.woshipm.com/evaluating/4265367.html">http://www.woshipm.com/evaluating/4265367.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/348526794">https://zhuanlan.zhihu.com/p/348526794</a></li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22:%22news_10491828831855067023%22%7D&amp;n_type=-1&amp;p_from=-1">https://mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22%3A%22news_10491828831855067023%22%7D&amp;n_type=-1&amp;p_from=-1</a></li><li><a href="https://mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22:%22news_9947754048422367932%22%7D&amp;n_type=-1&amp;p_from=-1">https://mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22%3A%22news_9947754048422367932%22%7D&amp;n_type=-1&amp;p_from=-1</a></li><li><a href="http://wx.jxjj.net/helpdetail/id/121.html">http://wx.jxjj.net/helpdetail/id/121.html</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/06/23/%E6%8A%BD%E5%8F%96%E5%BC%8F%E6%91%98%E8%A6%81%E6%A8%A1%E5%9E%8B/"/>
    <url>/2021/06/23/%E6%8A%BD%E5%8F%96%E5%BC%8F%E6%91%98%E8%A6%81%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="抽取式摘要模型"><a href="#抽取式摘要模型" class="headerlink" title="抽取式摘要模型"></a>抽取式摘要模型</h2><ul><li><p>从source 中选择合适的句子作为摘要的模型，要求被选择的句子同时满足两个要求</p><ul><li>包含原文中重要的信息，并且在逻辑上保持一致</li><li>具备最低的冗余性</li></ul><blockquote><p>如何衡量摘要于包含原文重要信息，以及如何判断是否是最低的冗余性</p></blockquote></li><li><p>抽取式摘要通常被视为sequence labeling task ， decoder 沿着文档挨个句子进行二分类，在每一步解码的时候综合</p><ul><li>当前句子的语义信息</li><li>上一步的解码状态</li><li>文档的全局语义信息判断当前的句子是否应该被选择作为摘要</li></ul></li></ul><blockquote><p>是否是当前主流做法/未来发展方向，如果不是的话有什么弊端？</p></blockquote><ul><li><p>摘要现状：T5/Pegasus 为基础的生成式摘要模型表现超过了抽取式摘要SOTA的结果</p></li><li><p>2016年<a href="https://www.aclweb.org/anthology/P16-1046.pdf">文献1</a>首次提出将LSTM作为decoder，每一步解码的输入是上一步句子的sentence embedding ，输出的隐藏状态经过线性层和sigmoid 进行二分类，用来预测当前句子属于摘要句子的概率，之后的LSTM/GRU 成为了主流的decoder模型，后续基于decoder 侧的改进主要集中于：</p><ul><li>Hidden-state 在送入classifier 之前，应该与哪些模块/语义单元进行更有效的信息沟通</li></ul><blockquote><p>Char/word/sentence/para 级别 进行attention交互？</p></blockquote><ul><li>如何更有效的信息沟通/交互</li></ul><blockquote><p>借鉴FusionNet或者CSRAN网络 的融合方式？</p></blockquote></li></ul><p>![image-20201103101449213](/Users/liusongyan/Library/Application Support/typora-user-images/image-20201103101449213.png)</p><ul><li><p>2018年<a href="https://arxiv.org/pdf/1704.04530.pdf">文献2</a>提出压缩文档的时候，除了使用文档本身的内容，还可以使用一些边缘信息如下：decoder 在解码的时候，输入包含了当前句子的sentence-embedding 还包括了side -information</p><ul><li>title</li><li>Image caption</li><li>Table caption</li></ul><p>![image-20201103103021505](/Users/liusongyan/Library/Application Support/typora-user-images/image-20201103103021505.png)</p><blockquote><p>大小写/是否缩写/char 的位置句子的位置/是否存在同义词/近义词 等统计特征引进来会不会有意义</p></blockquote></li><li><p>2018年<a href="https://www.aclweb.org/anthology/P18-1014.pdf">文献3</a>指出抽取式摘要不能仅仅关注句子的重要程度，还需要关注句子中关键词的重要程度，作者认为这些关键词的往往是文档的核心实体，包含关键词的句子被选择为摘要的概率总是大于不包含关键词的句子，模型中存在两个decoder，</p><ul><li>一个是词级别的解码器每一步的输出都是词表进行筛选，代表每个词被选择的概率，</li><li>另一个是句子级别的解码器，代表每个句子被选择的概率。</li><li>两个解码器同步解码，在第t个时间步决定模型选择词解码器的输出还是句子解码器的输出</li><li>在预测的时候，每个句子被选择为摘要的概率等于该句子被预测的概率和其所包含的所有词被预测的概率和，如果一个词被预测，那么用概率最大值作为替代</li></ul><p>![image-20201103103050715](/Users/liusongyan/Library/Application Support/typora-user-images/image-20201103103050715.png)</p></li><li><p>除了RNN做解码器，还有一类常用的解码器（MLP+sigmoid）在解码的时候对每个句子单独进行分类，其他句子是否已经被选择为摘要对当前句子的分类没有影响。<a href="https://arxiv.org/pdf/1611.04230.pdf">文献4</a>提出统合5种信息的分类器：</p><p>$h_j = tanh(W_{st}[h_j^f,h_j^b]+b_{st})$</p><p>$s_j = \sum_{i=1}^{j-1}{h_iP(y_i=1|h_i,s_i,d)}$ </p><p>$P(y_i=1|h_j,s_j,d) = \sigma(W_ch_j+h_j^TW_sd-h_j^TW_rtanh(s_j)+W_{ap}p_j^a+W_{rp}p_j^r+b)$</p><ul><li>Content：$W_chj$代表第j个句子语义的影响，$h_j$是第j个句子的表示</li><li>Salience：$h_j^TW_sd$代表第j句在文档中重要度的影响，即信息性，d是文档的表示doc-embedding，是由所有句子的embedding 进行 average-reduction 然后过tanh 激活函数得到的</li><li>Novelty：$h_j^TW_rtanh(s_j)$ 代表第j句相对目前摘要冗余度的影响，$s_j$是第j步时当前摘要的表示，这是一个惩罚项，即冗余度高的句子加入摘要的概率更低</li><li>Absolute-position： $W_{ap}p_j^a$ 代表第j句在文档中绝对位置的影响</li><li>Relative-position：$W_{rp}p_j^r$ 代表第j句在文档中的相对位置的影响</li></ul></li><li><p>基于上面文献的想法，<a href="https://arxiv.org/pdf/1804.07036.pdf">文献5</a>提出更简单的分类公式：用RNN解码的思想迭代预测标签值</p><p>$P(y_t=1|X,y_{1:t-1})=\sigma(W_2tanh(W_1[h_t,g_{t-1},d]+b_1)+b_2)$</p><p>$g_t = g_{t-1}+y_t \times tanh(W_gh_t+b_g)$</p><blockquote><p>UNILM 默默举个爪</p></blockquote></li><li><p>Encoder编码器没什么好说的，都是CNN/RNN 改编码方式，19年以后都是预训练模型编码了，</p><blockquote><p>需要关注的点是GCN进行结合的方式，</p></blockquote></li><li><p>抽取式摘要任务通常被视为sequence labeling task 因此传统的抽取式摘要模型都是用decoder 逐句对待压缩文档中的每个句子进行二分类，但是这样的模型在解码的过程中，重要的信息分布在文档或者文档偏后的位置，因此<a href="https://arxiv.org/pdf/1807.02305.pdf">文献6</a>提出不再将摘要任务视为序列生成任务，而是视为最有选择任务(global select task ), 具体来讲模型仍然适用RNN的方式进行循环解码，但是在每一步解码的时候，<strong>并非对单个句子进行分类，而是计算在尚未被选择为摘要的句子上的概率分布，代表每个句子被选择为摘要的概率.</strong>.</p></li></ul><blockquote><p>没懂..</p></blockquote><ul><li>LOSS 改进方面，传统摘要抽取的loss 是 maximum likelihood estimation (MLE) ,最大化每个句子的gold labels 的概率，这种损失函数等价于Cross -Entropy LOSS，后续loss 的改进方向偏向RL loss（我觉得略扯）</li></ul><blockquote><p>Ranking loss 可以继续做看样子</p></blockquote><ul><li>预训练模型方面比较突出的工作一个是**<a href="https://arxiv.org/pdf/1903.10318.pdf">BERTSUM文献7</a>**模型，个人觉得主要是就是把BERT当encoder 然后对每个句向量做二分类</li></ul><blockquote><p>这里面有两个问题，BERT只是说对句子做编码，那么对于文档/段落级别的编码论文中是否有相关的工作，</p><p>超出512文档，论文中是怎么做处理的</p></blockquote><ul><li><a href="https://arxiv.org/pdf/1910.14142.pdf">文献8</a> 和 <a href="https://arxiv.org/pdf/2004.12393.pdf">文献9</a> 是BERTSUM的基础上对特征抽取部分做了较大的改进(加了图神经网络)，其中，DiscoBert将BERT的特征抽取与图卷积神经网络有效的结合在一起。但是在图网络构建的过程中，采用的是RST共指关系树的方式构造了对应的图结构，相比而言HeterSumGraph 利用异构图神经网络尝试引入更多的节点信息表示来更好的建模句子之间的关系。</li></ul><p>![image-20201103140429559](/Users/liusongyan/Library/Application Support/typora-user-images/image-20201103140429559.png)</p><ul><li><p><a href="https://arxiv.org/pdf/1905.02450.pdf">文献10</a>思路简单，操作复杂，尝试将摘要抽取任务等价于文本匹配任务，实际上是用一种带有剪枝行为的贪心搜索。</p><blockquote><p>个人认为这个任务的核心工作在于candidates的构建上，因为这个构建方式决定了解码搜索空间的范围</p><p>因此如果能够找出更标准的抽取式候选集的方式，以及替换掉rouge的方式。应该可以达到新的上限</p></blockquote></li><li><p><a href="https://arxiv.org/abs/2010.07886">文献11</a>看不太懂，不过好像是从真实性和显著性进行建模，似乎很有道理的样子.。。</p></li></ul><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li>抽取式摘要，ground truth 长度有限制嘛，固定三句话？</li><li>什么是 trigram blocking strategy</li></ul><h2 id="优化方向"><a href="#优化方向" class="headerlink" title="优化方向"></a>优化方向</h2><ul><li>文本建模方面：<ul><li>512句长问题<ul><li>UNILM</li></ul></li><li>引入更多统计/知识特征<ul><li>大小写/专有名词/词性/位置信息/同义词等</li><li>textRank 关键词信息</li></ul></li><li>图神经网络结合<ul><li>BERT+ GCN /利用外部知识构建图神经网络</li></ul></li></ul></li><li>特征交互<ul><li>新版Transformer  -&gt;<strong>Synthesizer</strong></li><li>FusionNet 字符/词/句子混合交互</li></ul></li><li>训练任务/LOSS优化<ul><li>Sequence labeling task 优化（global select task任务）</li><li>序列生成任务</li><li>ranking loss/ RL loss / MLE loss</li></ul></li></ul><h2 id="需要做的事情"><a href="#需要做的事情" class="headerlink" title="需要做的事情"></a>需要做的事情</h2><ul><li><input disabled="" type="checkbox"> </li><li><input disabled="" type="checkbox"> 详细了解一下RL loss 、Ranking Loss 的收益</li><li><input disabled="" type="checkbox"> 关键词指导抽取</li><li><input disabled="" type="checkbox"> 序列标注给模型学<ul><li><input disabled="" type="checkbox"> 实体级别主谓宾</li><li><input disabled="" type="checkbox"> ranking loss</li></ul></li><li><input disabled="" type="checkbox"> Baseline 跑通</li><li><input disabled="" type="checkbox"> CLS 不能很好的表征这个句子</li><li><input disabled="" type="checkbox"> MoverScore 只考虑2元组和L元组</li></ul><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ol><li>Neural Summarization by Extracting Sentences and Words</li><li>Neural Extractive Summarization with Side Information</li><li>Extractive Summarization with SWAP-NET: Sentences and Words from Alternating Pointer Networks</li><li>SummaRuNNer: A Recurrent Neural Network based Sequence Model for Extractive Summarization of Documents</li><li>Learning to Extract Coherent Summary via Deep Reinforcement Learning</li><li>Neural Document Summarization by Jointly Learning to Score and Select Sentences</li><li>Fine-tune BERT for Extractive Summarization</li><li>Discourse-Aware Neural Extractive Text Summarization</li><li>Heterogeneous Graph Neural Networks for Extractive Document Summarization</li><li>Extractive Summarization as Text Matching</li><li>Compressive Summarization with Plausibility and Salience Modelin</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/06/23/%E5%8F%8D%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2021/06/23/%E5%8F%8D%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="反转二叉树"><a href="#反转二叉树" class="headerlink" title="反转二叉树"></a>反转二叉树</h2><p>题目链接：<a href="https://www.acwing.com/problem/content/37/">https://www.acwing.com/problem/content/37/</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mirror</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span>;<br>        TreeNode *tmp = root-&gt;left;<br>        root-&gt;left = root-&gt;right;<br>        root-&gt;right = tmp;<br>        <span class="hljs-built_in">mirror</span>(root-&gt;left);<br>        <span class="hljs-built_in">mirror</span>(root-&gt;right);<br>        <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/06/23/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Anaconda/"/>
    <url>/2021/06/23/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Anaconda/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu系统安装Anaconda"><a href="#Ubuntu系统安装Anaconda" class="headerlink" title="Ubuntu系统安装Anaconda"></a>Ubuntu系统安装Anaconda</h1><h2 id="一、进入Anaconda官网界面"><a href="#一、进入Anaconda官网界面" class="headerlink" title="一、进入Anaconda官网界面"></a>一、进入Anaconda官网界面</h2><ul><li><a href="http://www.anaconda.com/">www.anaconda.com</a></li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/hxXLvq.png" alt="hxXLvq"></p><h2 id="二、找到anaconda的下载链接"><a href="#二、找到anaconda的下载链接" class="headerlink" title="二、找到anaconda的下载链接"></a>二、找到anaconda的下载链接</h2><ul><li>这个地方注意是安装在linux-ubuntu18的系统上，所以选择64-x86的版本</li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/BntDfL.png" alt="BntDfL"></p><h2 id="三、下载对应anconda-bash-安装脚本"><a href="#三、下载对应anconda-bash-安装脚本" class="headerlink" title="三、下载对应anconda bash 安装脚本"></a>三、下载对应anconda bash 安装脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -c https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/2j39Pm.png" alt="2j39Pm"></p><h2 id="四、执行安装"><a href="#四、执行安装" class="headerlink" title="四、执行安装"></a>四、执行安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash Anaconda3-2020.11-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/X0Aa6r.png" alt="X0Aa6r"></p><h2 id="五、一顿回车确认"><a href="#五、一顿回车确认" class="headerlink" title="五、一顿回车确认"></a>五、一顿回车确认</h2><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/97zyQu.png" alt="97zyQu"></p><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/DLvMnP.png" alt="DLvMnP"></p><ul><li>刚开始安装完没有conda 命令不生效，这个时候需要重新启动一下</li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/TOPpJD.png" alt="TOPpJD"></p><h2 id="六、重新启动终端"><a href="#六、重新启动终端" class="headerlink" title="六、重新启动终端"></a>六、重新启动终端</h2><ul><li>完成安装</li></ul><p><img src="https://yanyandexiaoruantang0828.oss-cn-beijing.aliyuncs.com/uPic/jFccXK.png" alt="jFccXK"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/23/hello-world/"/>
    <url>/2021/06/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start1"><a href="#Quick-Start1" class="headerlink" title="Quick Start1"></a>Quick Start1</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/06/23/Conda%E4%B8%8EPip%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/06/23/Conda%E4%B8%8EPip%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="Conda与Pip以及Tmux常用命令"><a href="#Conda与Pip以及Tmux常用命令" class="headerlink" title="Conda与Pip以及Tmux常用命令"></a>Conda与Pip以及Tmux常用命令</h2><ul><li>查看conda版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda --version<br></code></pre></td></tr></table></figure><ul><li>查看当前存在哪些conda环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda env list<br></code></pre></td></tr></table></figure><ul><li>检查更新当前conda</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n your_env_name python=3.7<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高频题总结一下</title>
    <link href="/2020/10/25/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2020/10/25/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="甚高频"><a href="#甚高频" class="headerlink" title="甚高频"></a>甚高频</h2><ul><li><p><strong>快速排序</strong>(保送题)</p></li><li><p><strong>二分查找</strong>(保送题)</p><ul><li><h4 id="x-的平方根"><a href="#x-的平方根" class="headerlink" title="x 的平方根"></a><a href="https://leetcode-cn.com/problems/sqrtx/">x 的平方根</a></h4></li><li><h4 id="搜索旋转排序数组"><a href="#搜索旋转排序数组" class="headerlink" title="搜索旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">搜索旋转排序数组</a></h4></li></ul></li><li><p><strong>大数加减乘幂</strong></p><ul><li><p>大数相加</p></li><li><p>大数相减</p></li><li><h4 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a><a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">数值的整数次方</a></h4></li></ul></li><li><p><strong>TopK</strong></p><ul><li><h4 id="前-K-个高频元素"><a href="#前-K-个高频元素" class="headerlink" title="前 K 个高频元素"></a><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">前 K 个高频元素</a></h4></li><li><h4 id="最小的k个数"><a href="#最小的k个数" class="headerlink" title="最小的k个数"></a><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/">最小的k个数</a></h4></li><li><h4 id="二叉搜索树的第k大节点"><a href="#二叉搜索树的第k大节点" class="headerlink" title="二叉搜索树的第k大节点"></a><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">二叉搜索树的第k大节点</a></h4></li></ul></li></ul><h2 id="超高频"><a href="#超高频" class="headerlink" title="超高频"></a>超高频</h2><ul><li><p><strong>排序</strong></p><ul><li>冒泡排序/选择排序/插入排序/归并排序</li></ul></li><li><p><strong>链表</strong></p><ul><li><h4 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">反转链表</a></h4></li><li><h4 id="两个链表的第一个公共节点"><a href="#两个链表的第一个公共节点" class="headerlink" title="两个链表的第一个公共节点"></a><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">两个链表的第一个公共节点</a></h4></li><li><h4 id="删除链表的节点"><a href="#删除链表的节点" class="headerlink" title="删除链表的节点"></a><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/">删除链表的节点</a></h4></li></ul></li><li><p><strong>字符串</strong></p><ul><li><p>字符串反转</p></li><li><h4 id="整数反转"><a href="#整数反转" class="headerlink" title=" 整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/"> 整数反转</a></h4></li><li><h4 id="翻转单词顺序"><a href="#翻转单词顺序" class="headerlink" title="翻转单词顺序"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/">翻转单词顺序</a></h4></li><li><p>最长公共子序列</p></li><li><p>最长公共子串</p></li><li><h4 id="数组中数字出现的次数"><a href="#数组中数字出现的次数" class="headerlink" title="数组中数字出现的次数"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">数组中数字出现的次数</a></h4></li><li><h4 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a><a href="https://leetcode-cn.com/problems/edit-distance/">编辑距离</a></h4></li></ul></li><li><p><strong>二叉树</strong></p><ul><li><p>DFS 遍历(前中后序遍历)</p></li><li><p>BFS 遍历</p><ul><li><h4 id="从上到下打印二叉树-III"><a href="#从上到下打印二叉树-III" class="headerlink" title="从上到下打印二叉树 III"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">从上到下打印二叉树 III</a></h4></li></ul></li><li><h4 id="树的子结构"><a href="#树的子结构" class="headerlink" title=" 树的子结构"></a><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/"> 树的子结构</a></h4></li><li><h4 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a><a href="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">对称的二叉树</a></h4></li><li><h4 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/">二叉树的深度</a></h4></li></ul></li><li><p><strong>二维矩阵</strong></p><ul><li><h4 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">顺时针打印矩阵</a></h4></li><li><p>####<a href="https://www.acwing.com/solution/content/9321/">走迷宫</a></p></li></ul></li><li><p><strong>动态规划</strong></p><ul><li><h4 id="单词拆分"><a href="#单词拆分" class="headerlink" title="单词拆分"></a><a href="https://leetcode-cn.com/problems/word-break/">单词拆分</a></h4></li><li><h4 id="完全平方数"><a href="#完全平方数" class="headerlink" title="完全平方数"></a><a href="https://leetcode-cn.com/problems/perfect-squares/">完全平方数</a></h4></li><li><h4 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a><a href="https://leetcode-cn.com/problems/chou-shu-lcof/">丑数</a></h4></li><li><p>青蛙跳台阶</p></li><li><p>股票问题</p></li><li><p>输出斐波那契数列中第N个数</p></li></ul></li></ul><h2 id="高频"><a href="#高频" class="headerlink" title="高频"></a>高频</h2><ul><li><h4 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">合并两个有序链表</a></h4></li><li><p>输出链表里倒数第K个节点</p></li><li><h4 id="全排列"><a href="#全排列" class="headerlink" title=" 全排列"></a><a href="https://leetcode-cn.com/problems/permutations/"> 全排列</a></h4></li><li><h4 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></h4></li><li><p><strong>回文串</strong></p><ul><li>判断是否是回文字串</li><li>字符串中是否含有回文子串</li><li>最长回文子串</li></ul></li><li><p><strong>公共串/序列</strong></p><ul><li>最长公共前缀</li><li>最长公共上升子序列</li></ul></li><li><p><strong>二叉树</strong></p><ul><li><h4 id="路径总和"><a href="#路径总和" class="headerlink" title="路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/">路径总和</a></h4></li><li><p>判断一颗树是不是二叉搜索树/平衡树</p></li><li><h4 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/">二叉树的最近公共祖先</a></h4></li></ul></li><li><p><strong>栈/队列</strong></p><ul><li><p>栈模拟队列/队列模拟栈</p></li><li><h4 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a><a href="https://leetcode-cn.com/problems/trapping-rain-water/">接雨水</a></h4></li><li><h4 id="柱状图中最大的矩形"><a href="#柱状图中最大的矩形" class="headerlink" title="柱状图中最大的矩形"></a><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">柱状图中最大的矩形</a></h4></li></ul></li><li><p><strong>位运算</strong></p><ul><li><h4 id="2的幂-4的幂"><a href="#2的幂-4的幂" class="headerlink" title="2的幂/4的幂"></a><a href="https://leetcode-cn.com/problems/power-of-two/">2的幂</a>/<a href="https://leetcode-cn.com/problems/power-of-four/">4的幂</a></h4></li><li><h4 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/">只出现一次的数字</a></h4></li></ul></li><li><p><strong>剑指 offer 上其他题</strong></p></li></ul><h2 id="中频"><a href="#中频" class="headerlink" title="中频"></a>中频</h2><ul><li><h4 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/">多数元素</a></h4></li><li><h4 id="反转链表-II"><a href="#反转链表-II" class="headerlink" title="反转链表 II"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">反转链表 II</a></h4></li><li><h4 id="寻找两个正序数组的中位数"><a href="#寻找两个正序数组的中位数" class="headerlink" title="寻找两个正序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a></h4></li><li><h4 id="寻找峰值"><a href="#寻找峰值" class="headerlink" title="寻找峰值"></a><a href="https://leetcode-cn.com/problems/find-peak-element/">寻找峰值</a></h4></li><li><h4 id="字符串转换整数-atoi"><a href="#字符串转换整数-atoi" class="headerlink" title="字符串转换整数 (atoi)"></a><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/">字符串转换整数 (atoi)</a></h4></li><li><p>N个链表的归并排序</p></li><li><p>判断一个数是不是质数</p></li><li><p>01背包问题</p></li></ul><h2 id="低频"><a href="#低频" class="headerlink" title="低频"></a>低频</h2><ul><li><strong>Leetcode 上热门题标签里的题</strong></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>刷题总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZigZag层次遍历二叉树</title>
    <link href="/2020/10/19/ZigZag%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/10/19/ZigZag%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/</a></p><p>思路：</p><ul><li>搞一个flag 记录一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">levelOrder</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        results,nodes = [],[root]<br>        flag = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span>(nodes):<br>            curStack,nextStack = [],[]<br>            <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> nodes:<br>                curStack.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    nextStack.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    nextStack.append(node.right)<br>            <span class="hljs-keyword">if</span> flag%<span class="hljs-number">2</span> ==<span class="hljs-number">1</span>:<br>                curStack = curStack[::-<span class="hljs-number">1</span>]<br>            flag+=<span class="hljs-number">1</span><br>            results.append(curStack)<br>            nodes = nextStack<br>        <span class="hljs-keyword">return</span> results<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>BinaryTree</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>层次遍历二叉树1</title>
    <link href="/2020/10/19/%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/10/19/%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/submissions/">https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/submissions/</a></p><p>思路：无</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">levelOrder</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root : <span class="hljs-keyword">return</span> []<br>        results,nodes = [],[root]<br>        <span class="hljs-keyword">while</span> nodes:<br>            curStack,nextStack = [],[]<br>            <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> nodes:<br>                curStack.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    nextStack.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    nextStack.append(node.right)<br>            results+=curStack<br>            nodes = nextStack<br>        <span class="hljs-keyword">return</span> results<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>BinaryTree</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>层次遍历二叉树2</title>
    <link href="/2020/10/19/%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%912/"/>
    <url>/2020/10/19/%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%912/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/submissions/">https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/submissions/</a></p><p>思路：</p><ul><li>无</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">levelOrder</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> []<br>        result,nodes = [],[root]<br>        <span class="hljs-keyword">while</span>(nodes):<br>            curStack,nextStack = [],[]<br>            <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> nodes:<br>                curStack.append(node.val)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    nextStack.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    nextStack.append(node.right)<br>            result.append(curStack)<br>            nodes = nextStack<br>        <span class="hljs-keyword">return</span> result<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>BinaryTree</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉搜索树判断</title>
    <link href="/2020/10/19/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%88%A4%E6%96%AD/"/>
    <url>/2020/10/19/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/validate-binary-search-tree/submissions/">https://leetcode-cn.com/problems/validate-binary-search-tree/submissions/</a></p><p>思路：</p><ul><li>无</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isValidBST</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        inorders = self.inorder(root)<br>        <span class="hljs-keyword">if</span> inorders == <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(inorders)):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inorder</span>(<span class="hljs-params">self,root:TreeNode</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root :<br>            <span class="hljs-keyword">return</span> []<br>        <span class="hljs-comment"># [] + [root.val] + []</span><br>        <span class="hljs-keyword">return</span> self.inorder(root.left)+ [root.val] + self.inorder(root.right)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>BinaryTree</tag>
      
      <tag>Easy</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉搜索树的后序遍历序列</title>
    <link href="/2020/10/19/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
    <url>/2020/10/19/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/">https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/</a></p><p>思路：后序序列最后一个值为root；二叉搜索树左子树的值都比root小，右子树的值都比root大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">verifyPostorder</span>(<span class="hljs-params">self, postorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">if</span> postorder <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(postorder) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        n = <span class="hljs-built_in">len</span>(postorder)<br>        <span class="hljs-comment"># 找出根节点</span><br>        root = postorder[-<span class="hljs-number">1</span>]<br>        <span class="hljs-comment"># 二叉搜索树中左子树的结点小于根结点</span><br>        i = <span class="hljs-number">0</span> <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> postorder[i]&gt;root:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,n-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> postorder[j]&lt;root:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <br>        <span class="hljs-comment"># 判断左子树是不是二叉搜索树</span><br>        left = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span>:<br>            left = self.verifyPostorder(postorder[:i])<br>        <span class="hljs-comment"># 判断左子树是不是二叉搜索树</span><br>        right = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> i&lt;n-<span class="hljs-number">1</span>:<br>            right = self.verifyPostorder(postorder[i:-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span> left <span class="hljs-keyword">and</span> right<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>BinaryTree</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>删除列表节点</title>
    <link href="/2020/10/19/%E5%88%A0%E9%99%A4%E5%88%97%E8%A1%A8%E8%8A%82%E7%82%B9/"/>
    <url>/2020/10/19/%E5%88%A0%E9%99%A4%E5%88%97%E8%A1%A8%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/submissions/">https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/submissions/</a></p><p>思路：</p><ul><li>定位节点： 遍历链表，直到 head.val == val 时跳出，即可定位目标节点。</li><li>修改引用： 设节点 cur 的前驱节点为 pre ，后继节点为 cur.next ；则执行 pre.next = cur.next ，即可实现删除 cur 节点。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteNode</span>(<span class="hljs-params">self, head: ListNode, val: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        <span class="hljs-keyword">if</span> head.val == val :<span class="hljs-keyword">return</span> head.<span class="hljs-built_in">next</span><br>        pre,cur = head,head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span>(cur <span class="hljs-keyword">and</span> cur.val != val):<br>            pre,cur = cur,cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> cur:<br>            pre.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> head<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>Easy</tag>
      
      <tag>ListNode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>倒序输出链表</title>
    <link href="/2020/10/19/%E5%80%92%E5%BA%8F%E8%BE%93%E5%87%BA%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/19/%E5%80%92%E5%BA%8F%E8%BE%93%E5%87%BA%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reversePrint</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        <span class="hljs-comment"># 辅助栈</span><br>        stack = []<br>        <span class="hljs-keyword">while</span>(head):<br>            stack.append(head.val)<br>            head = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> stack[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>Easy</tag>
      
      <tag>ListNode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>相交链表公共节点</title>
    <link href="/2020/10/19/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/"/>
    <url>/2020/10/19/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/submissions/">https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/submissions/</a></p><p>思路：</p><ul><li>两个链表长度分别为L1+C、L2+C， C为公共部分的长度</li><li> 第一个人走了L1+C步后，回到第二个人起点走L2步；</li><li>第2个人走了L2+C步后，回到第一个人起点走L1步。 </li><li>当两个人走的步数都为L1+L2+C时两个家伙就相爱了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getIntersectionNode</span>(<span class="hljs-params">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:</span><br>        curA,curB = headA,headB<br>        <span class="hljs-keyword">while</span>(curA!=curB):<br>            curA = curA.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> curA <span class="hljs-keyword">else</span> headB<br>            curB = curB.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> curB <span class="hljs-keyword">else</span> headA<br>        <span class="hljs-keyword">return</span> curA<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>Easy</tag>
      
      <tag>ListNode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重建二叉树</title>
    <link href="/2020/10/19/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/10/19/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/submissions/">https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/submissions/</a></p><p>思路：</p><ul><li>先序遍历的第一个节点是根节点，根节点后面是左子树</li><li>中序遍历根节点左边是左子树，右边是右子树</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buildTree</span>(<span class="hljs-params">self, preorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], inorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; TreeNode:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(preorder) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(inorder) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(preorder) != <span class="hljs-built_in">len</span>(inorder):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 二叉树根节点是先序遍历[0]节点</span><br>        root = TreeNode(preorder[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inorder)):<br>            <span class="hljs-keyword">if</span> preorder[<span class="hljs-number">0</span>] == inorder[i]:<br>                root.left = self.buildTree(preorder[<span class="hljs-number">1</span>:i+<span class="hljs-number">1</span>],inorder[<span class="hljs-number">0</span>:i])<br>                root.right = self.buildTree(preorder[i+<span class="hljs-number">1</span>:],inorder[i+<span class="hljs-number">1</span>:])<br>                <span class="hljs-keyword">return</span> root<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>Easy</tag>
      
      <tag>ListNode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>镜像二叉树</title>
    <link href="/2020/10/19/%E9%95%9C%E5%83%8F%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/10/19/%E9%95%9C%E5%83%8F%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/submissions/">https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/submissions/</a></p><p>思路：</p><ul><li>无</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mirrorTree</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; TreeNode:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:  <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        root.left,root.right = self.mirrorTree(root.right),self.mirrorTree(root.left)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>BinaryTree</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树中和为某一值的路径</title>
    <link href="/2020/10/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <url>/2020/10/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/</a></p><p>思路：无</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pathSum</span>(<span class="hljs-params">self, root: TreeNode, <span class="hljs-built_in">sum</span>: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> []<br>        res = []<br>        result = []<br>        <span class="hljs-comment"># result 相当于全局引用，值是会改的</span><br>        self.dfs(root,<span class="hljs-built_in">sum</span>,res,result)<br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">self,root,<span class="hljs-built_in">sum</span>,res,result</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">sum</span> -= root.val<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root.left <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> root.right <span class="hljs-keyword">and</span> <span class="hljs-built_in">sum</span> == <span class="hljs-number">0</span>:<br>            res += [root.val]<br>            result.append(res)<br>        self.dfs(root.left,<span class="hljs-built_in">sum</span>,res+[root.val],result)<br>        self.dfs(root.right,<span class="hljs-built_in">sum</span>,res+[root.val],result)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>BinaryTree</tag>
      
      <tag>Easy</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2020/10/19/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/19/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/</a></p><p>思路：</p><ul><li>。。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        pre,cur = <span class="hljs-literal">None</span>,head<br>        <span class="hljs-keyword">while</span>(cur):<br>            <span class="hljs-comment"># 当前结点非空时，当前结点指向前驱结点。pre,cur接着往后走。</span><br>            cur.<span class="hljs-built_in">next</span>,pre,cur= pre,cur,cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> pre<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>Easy</tag>
      
      <tag>ListNode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合并有序链表</title>
    <link href="/2020/10/19/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/19/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/jian-zhi-25-he-bing-liang-ge-pai-xu-de-lian-biao-d/">https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/jian-zhi-25-he-bing-liang-ge-pai-xu-de-lian-biao-d/</a></p><p>思路：</p><ul><li>建一个伪节点dummy，避免对但单个头结点的单独讨论</li><li>伪节点同时赋值给dummy和cur，一个留守节点dummy，一个随着添加过程走cur，最后返回dummy</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergeTwoLists</span>(<span class="hljs-params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span><br>        <span class="hljs-comment"># dummy 是虚拟头节点用于返回</span><br>        <span class="hljs-comment"># cur 是用来跟着走的当前节点</span><br>        dummy = cur = ListNode(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">while</span>(l1 <span class="hljs-keyword">and</span> l2):<br>            <span class="hljs-keyword">if</span> l1.val &lt;l2.val:<br>                cur.<span class="hljs-built_in">next</span> ,l1 = l1,l1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                cur.<span class="hljs-built_in">next</span>,l2 = l2,l2.<span class="hljs-built_in">next</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>        cur.<span class="hljs-built_in">next</span> = l1 <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">else</span> l2<br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>Easy</tag>
      
      <tag>ListNode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复杂链表链表的复制</title>
    <link href="/2020/10/19/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <url>/2020/10/19/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/submissions/">https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/submissions/</a></p><p>思路：</p><ul><li>两次遍历，一次记录节点顺序</li><li>一次记录指针关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># Definition for a Node.</span><br><span class="hljs-string">class Node:</span><br><span class="hljs-string">    def __init__(self, x: int, next: &#x27;Node&#x27; = None, random: &#x27;Node&#x27; = None):</span><br><span class="hljs-string">        self.val = int(x)</span><br><span class="hljs-string">        self.next = next</span><br><span class="hljs-string">        self.random = random</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">copyRandomList</span>(<span class="hljs-params">self, head: <span class="hljs-string">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        cur = head<br>        <span class="hljs-comment"># 这样初始化是保证哈希表的 key 为 None （空节点）时也有效。</span><br>        <span class="hljs-comment"># 举个例子：若 p.random = None，则 Hash[p.random] 为 Hash[None]，</span><br>        <span class="hljs-comment"># 又 Hash[p].random 应为 None，故应有 Hash[None] == None，</span><br>        <span class="hljs-comment"># 即哈希表中应有 &#123;None: None&#125;。</span><br>        hash_map = &#123;<span class="hljs-literal">None</span>:<span class="hljs-literal">None</span>&#125;<br>        <span class="hljs-keyword">while</span>(cur):<br>            hash_map[cur] = Node(cur.val)<br>            cur = cur.<span class="hljs-built_in">next</span><br>        cur = head<br>        <span class="hljs-keyword">while</span>(cur):<br>            <span class="hljs-comment"># Hash 表中的 key 为原链表的节点，value 为复制后链表的节点。</span><br>            <span class="hljs-comment"># 因此，为 Hash[p].next 赋值实际上就是为 p 复制后的链表节点 p&#x27; 添加 next 指针，</span><br>            <span class="hljs-comment"># 又 p.next 复制后的节点 (p.next)&#x27; 在 Hash 表中为 Hash[p.next]，</span><br>            <span class="hljs-comment"># 故 Hash[p].next = Hash[p.next] 的含义即为，</span><br>            <span class="hljs-comment"># 将 p 复制后的节点 p&#x27; 指向 p.next 复制后的节点 (p.next)&#x27;</span><br>            hash_map[cur].<span class="hljs-built_in">next</span> = hash_map[cur.<span class="hljs-built_in">next</span>]<br>            hash_map[cur].random = hash_map[cur.random]<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> hash_map[head]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>Easy</tag>
      
      <tag>ListNode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表中倒数第k个节点</title>
    <link href="/2020/10/19/%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <url>/2020/10/19/%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/submissions/">https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/submissions/</a></p><p>思路：</p><ul><li>​    快慢指针</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getKthFromEnd</span>(<span class="hljs-params">self, head: ListNode, k: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        first_ptr,last_ptr = head,head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            first_ptr = first_ptr.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> first_ptr:<br>            first_ptr = first_ptr.<span class="hljs-built_in">next</span><br>            last_ptr = last_ptr.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> last_ptr<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>Easy</tag>
      
      <tag>ListNode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子树subTree</title>
    <link href="/2020/10/19/%E5%AD%90%E6%A0%91subTree/"/>
    <url>/2020/10/19/%E5%AD%90%E6%A0%91subTree/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/submissions/">https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/submissions/</a></p><p>思路：</p><ul><li>这是一类题</li><li>这类题先匹配根节点</li><li>然后匹配子树</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isSubStructure</span>(<span class="hljs-params">self, A: TreeNode, B: TreeNode</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> A <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> B: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> self.check(A,B) <span class="hljs-keyword">or</span> self.isSubStructure(A.left,B) <span class="hljs-keyword">or</span> self.isSubStructure(A.right,B)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">self,A,B</span>):</span><br>        <span class="hljs-keyword">if</span> B == <span class="hljs-literal">None</span> :<span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> A == <span class="hljs-literal">None</span> :<span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> A.val==B.val <span class="hljs-keyword">and</span> self.check(A.left,B.left) <span class="hljs-keyword">and</span> self.check(A.right,B.right)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>BinaryTree</tag>
      
      <tag>Easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组中重复的数字</title>
    <link href="/2020/10/19/%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2020/10/19/%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>来源：剑指 Offer 03. </p><p>链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/</a></p><p>思路：</p><ul><li>重排这个数组。从头到尾一次扫描这个数组中的每一个数字。</li><li>当下标为i时，首先比较这个数字（m）是不是等于i。</li><li>如果是接着扫描下一个。如果不是，再拿这个数字和下标为m的数进行比较。如果它和第m个数相等，则找到重复值，如果不相等就把它和第m个数交换。</li><li>把m放到属于它的位置上去。依次重复上述过程。<ul><li>如：{2,3,1,0,2,5,3}从0开始计数，数组第一个下标位置为0，里面的值为2，不相等</li><li>交换下标为2的地方变为：{1,3,2,0,2,5,3}，</li><li>然后在比较下标为0的位置，值为1，不相等，</li><li>交换下标为0和下标为1的值{3,1,2,0,2,5,3}；比较下标和内容不相等，</li><li>继续交换下标为0的值和下标为3的值{0,1,2,3,2,5}，<ul><li>依次继续交换。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findRepeatNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">for</span> idx,val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">while</span>(idx!=val):<br>                <span class="hljs-comment"># val值与val索引处的值相同，则为重复项</span><br>                <span class="hljs-keyword">if</span> val == nums[val]:<br>                    <span class="hljs-keyword">return</span> val<br>                nums[idx],nums[val] = nums[val],nums[idx]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python刷题</tag>
      
      <tag>Easy</tag>
      
      <tag>Array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数之和</title>
    <link href="/2020/04/21/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2020/04/21/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/two-sum/submissions/">https://leetcode-cn.com/problems/two-sum/submissions/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        <span class="hljs-built_in">hash</span> = &#123;&#125;<br>        <span class="hljs-keyword">for</span> idx,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-comment"># 如果两个数的和等于target,返回他们的索引</span><br>            <span class="hljs-keyword">if</span> target - num <span class="hljs-keyword">in</span> <span class="hljs-built_in">hash</span>:<br>                <span class="hljs-keyword">return</span> [<span class="hljs-built_in">hash</span>[target-num],idx]<br>            <span class="hljs-comment"># 不满足的话，把当前遍历的数存到字典里</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">hash</span>[num] = idx<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组中重复数字</title>
    <link href="/2020/04/21/%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97/"/>
    <url>/2020/04/21/%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/</a></p><h3 id="利用集合存已经筛选过的"><a href="#利用集合存已经筛选过的" class="headerlink" title="利用集合存已经筛选过的"></a>利用集合存已经筛选过的</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findRepeatNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        count = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> count:<br>                <span class="hljs-keyword">return</span> i<br>            <span class="hljs-keyword">else</span>:<br>                count.add(i)<br></code></pre></td></tr></table></figure><h3 id="原地算法"><a href="#原地算法" class="headerlink" title="原地算法"></a>原地算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findRepeatNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">for</span> idx,val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> idx!=val <span class="hljs-keyword">and</span> nums[val] == val:<br>                <span class="hljs-keyword">return</span> val<br>            nums[val],nums[idx] = nums[idx],nums[val]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常用脚本</title>
    <link href="/2020/04/21/Python%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    <url>/2020/04/21/Python%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p><strong>Python3 按行读JSON:</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">SQL_PATH = &#x27;xxx.json&#x27;<br>sql_data = []<br>with <span class="hljs-keyword">open</span>(SQL_PATH, encoding=&#x27;utf-8&#x27;) <span class="hljs-keyword">as</span> <span class="hljs-keyword">inf</span>:<br>    <span class="hljs-keyword">for</span> idx, <span class="hljs-keyword">line</span> <span class="hljs-keyword">in</span> enumerate(<span class="hljs-keyword">inf</span>):<br>        sql = json.loads(<span class="hljs-keyword">line</span>.strip())<br>        <span class="hljs-keyword">if</span> use_small and idx &gt;= 1000:<br>            <span class="hljs-keyword">break</span><br>        sql_data.<span class="hljs-keyword">append</span>(sql)<br><br></code></pre></td></tr></table></figure><p><strong>Python3 按行写JSON：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NumpyEncoder</span>(<span class="hljs-params">json.JSONEncoder</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot; Special json encoder for numpy types &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">default</span>(<span class="hljs-params">self, obj</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(obj, (numpy.int_, numpy.intc, numpy.intp, numpy.int8,<br>                            numpy.int16, numpy.int32, numpy.int64, numpy.uint8,<br>                            numpy.uint16, numpy.uint32, numpy.uint64)):<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(obj)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(obj, (numpy.float_, numpy.float16, numpy.float32,<br>                              numpy.float64)):<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(obj)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(obj, (numpy.ndarray,)):<br>            <span class="hljs-keyword">return</span> obj.tolist()<br>        <span class="hljs-keyword">return</span> json.JSONEncoder.default(self, obj)<br><br>    <br>fw = <span class="hljs-built_in">open</span>(output_path,<span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">for</span> sql_pred <span class="hljs-keyword">in</span> sql_preds:<br>    json.dump(sql_pred,fw,ensure_ascii=<span class="hljs-literal">False</span>,cls = NumpyEncoder)<br>    fw.writelines(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>fw.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JSON读写</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2020/04/21/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/04/21/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><strong>SCP 远程拷贝：</strong>scp + 本地目录 + 远程服务器目标地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -r DATA<span class="hljs-regexp">/ liusongyan.2020@10.22.145.137:/</span>data00<span class="hljs-regexp">/home/</span>liusongyan.<span class="hljs-number">2020</span><span class="hljs-regexp">/workspace/</span>dingpan_extraction<span class="hljs-regexp">/entity_mine/</span>RelationExtraction/<br></code></pre></td></tr></table></figure><p><strong>后台运行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CUDA_VISIBLE_DEVICES=3 nohup python main2.py&gt; ./train0421.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux 常用命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda配置tensorflow2</title>
    <link href="/2020/04/20/conda%E9%85%8D%E7%BD%AEtensorflow2/"/>
    <url>/2020/04/20/conda%E9%85%8D%E7%BD%AEtensorflow2/</url>
    
    <content type="html"><![CDATA[<h2 id="Conda环境安装"><a href="#Conda环境安装" class="headerlink" title="Conda环境安装"></a>Conda环境安装</h2><p>首先wget 下载conda 的bash 脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2020.02-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>得到<code>Anaconda3-2020.02-Linux-x86_64.sh</code> bash文件以后，使用bash 命令编译他：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash Anaconda3-2020.02-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>接下来一顿回车，记得把anconda3 安装在自己的根目录下即可</p><p>如果shell命令下没有source命令的话</p><p>![](<a href="https://raw.githubusercontent.com/UriBoyka2020">https://raw.githubusercontent.com/UriBoyka2020</a> /Picture/master/file2/20200420233303.png)</p><p>就把source换成bash</p><p>![](<a href="https://raw.githubusercontent.com/UriBoyka2020">https://raw.githubusercontent.com/UriBoyka2020</a> /Picture/master/file2/20200420233618.png)</p><p>然后配置环境变量，并编译,如果rc文件不存在的话先touch 一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/data00/home/songyan.liu2020/anaconda3/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>touch ~/.bash.rc<br><span class="hljs-built_in">source</span>  ~/.bash.rc<br></code></pre></td></tr></table></figure><p>最后<code>conda list</code>检查一下，没问题的话，conda的环境就安装成功了</p><h2 id="安装tensorflow2"><a href="#安装tensorflow2" class="headerlink" title="安装tensorflow2"></a>安装tensorflow2</h2><p>创建虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n conda-gpu python=3.7<br></code></pre></td></tr></table></figure><p>创建好了以后切到对应的conda 虚拟环境中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate xxx<br></code></pre></td></tr></table></figure><p>这个时候再pip是默认安装在conda的环境中</p><p>几个不同的pip的源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install tensorflow-gpu==2  -i https://mirrors.aliyun.com/pypi/simple/<br>pip install tensorflow --index-url=http://pypi.byted.org/simple/pypi/+simple --trusted-host=pypi.byted.org<br>pip install tensorflow-gpu==1.12.0 -i  https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><p>到这步基本tensorflow就安装完成</p><p>但是我在调用的时候会报错误：模型只能跑在CPU上，GPU空转</p><p>![](<a href="https://raw.githubusercontent.com/UriBoyka2020">https://raw.githubusercontent.com/UriBoyka2020</a> /Picture/master/file2/20200420234804.png)</p><p>这个时候需要加入对应的库的路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="hljs-built_in">local</span>/cuda/lib64:/usr/<span class="hljs-built_in">local</span>/lib/:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><span class="hljs-built_in">export</span> CUDA_HOME=/usr/<span class="hljs-built_in">local</span>/cuda<br><span class="hljs-built_in">export</span> OPENMPI_HOME=/usr/<span class="hljs-built_in">local</span>/openmpi<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$CUDA_HOME</span>/bin:<span class="hljs-variable">$OPENMPI_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$OPENMPI_HOME</span>/lib/:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br></code></pre></td></tr></table></figure><p>然后tensorflow 可以正常跑了</p><p>![](<a href="https://raw.githubusercontent.com/UriBoyka2020">https://raw.githubusercontent.com/UriBoyka2020</a> /Picture/master/file2/20200420235029.png)</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2020/04/19/test/"/>
    <url>/2020/04/19/test/</url>
    
    <content type="html"><![CDATA[<p>a ba b![image-20200419225948021](/Users/liusongyan/Library/Application Support/typora-user-images/image-20200419225948021.png)</p>]]></content>
    
    
    
    <tags>
      
      <tag>python刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAC上Hexo+Github-Page 搭建博客</title>
    <link href="/2020/04/19/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/04/19/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>主要参考链接：<a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p><p>安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo -g<br></code></pre></td></tr></table></figure><p>我的电脑不知道为啥一开始安装不上</p><p><img src="https://raw.githubusercontent.com/UriBoyka2020/Picture/master/file1/41587291549_.pic.jpg?token=ANXCMVAMO5VLJOKOC32E66K6TRTL4"></p><p>这个原因主要是没有安装node.js</p><p><img src="https://raw.githubusercontent.com/UriBoyka2020/Picture/master/file1/1587308445705.jpg?token=ANXCMVDJR4PKOVZZB4UXESK6TRUKA"></p><p>npm 过于卡顿可以参考如下链接：</p><p><a href="https://www.jianshu.com/p/cce30447fc35">https://www.jianshu.com/p/cce30447fc35</a></p><p>这里我采用了编辑 ~/.npmrc 加入下面内容就好使了</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-keyword">registry</span> = <span class="hljs-keyword">http</span>://<span class="hljs-keyword">registry</span>.cnpmjs.org<br></code></pre></td></tr></table></figure><p>剩下的就是</p><ul><li><p>新建博客文章：hexo new post “新的博客文章”</p></li><li><p>初始化：<code>hexo init</code></p></li><li><p>清除缓存：<code>hexo clean</code></p></li><li><p>部署：<code>hexo d -g</code></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>配置环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
